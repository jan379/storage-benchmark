    - name: Install fio Debian packages
      apt:
        name: "{{ packages }}"
        state: latest 
        update_cache: yes
      vars:
        packages:
        - fio
      when: ansible_facts['os_family'] == "Debian"  

    - name: Install fio RPM packages
      yum: 
        update_cache: yes
        allow_downgrade: yes
        state: latest 
        name: "{{ packages }}"
      vars:
        packages:
        - fio 
      when: ansible_facts['os_family'] == "RedHat" 

    - name: get Quobyte session 
      shell:
        cmd: qmgmt -u {{ api_service }} user login {{ admin_user }} {{ admin_password }} 

    - name: Test if tenant {{ my_tenant }} exists 
      shell:
        cmd: qmgmt -u {{ api_service }} tenant list | grep "^{{ my_tenant }} " | awk '{print $1}'
      register: my_tenant_test

    - name: Create Tenant 
      shell:
        cmd: qmgmt -u {{ api_service }} tenant create {{ my_tenant }} 
      when: my_tenant not in my_tenant_test.stdout

    - name: Test if volume flashbench exists 
      shell:
        cmd: qmgmt -u {{ api_service }} volume list | grep "^flashbench " | awk '{print $1}'
      register: my_volume_test

    - name: Create Volume flashbench
      shell:
        cmd: qmgmt -u {{ api_service }} volume create {{ my_tenant }}/flashbench user=root group=root configuration_name=noVolumeConfig
      when: '"flashbench" not in my_volume_test.stdout'

    - name: Test if volume hddbench exists 
      shell:
        cmd: qmgmt -u {{ api_service }} volume list | grep "^hddbench " | awk '{print $1}'
      register: my_volume_test

    - name: Create Volume hddbench
      shell:
        cmd: qmgmt -u {{ api_service }} volume create {{ my_tenant }}/hddbench user=root group=root configuration_name=noVolumeConfig
      when: '"hddbench" not in my_volume_test.stdout'

    - name: Test if policy "ssd_only" exists 
      shell:
        cmd: qmgmt -u {{ api_service }} policy-rule list | grep "ssd_only " | awk '{print $2}'
      register: my_policy_test

    - name: Write policy template 
      template:
        src: templates/policy-ssd_only.tpl
        dest: "/tmp/policy_template.tpl"
      when: '"ssd_only" not in my_policy_test.stdout'

    - name: Create policy 
      shell:
        cmd: qmgmt -u {{ api_service }} policy-rule import /tmp/policy_template.tpl 
      when: '"ssd_only" not in my_policy_test.stdout'

    - name: Test if policy "hdd_only" exists 
      shell:
        cmd: qmgmt -u {{ api_service }} policy-rule list | grep "hdd_only " | awk '{print $2}'
      register: my_policy_test

    - name: Write policy template 
      template:
        src: templates/policy-hdd_only.tpl
        dest: "/tmp/policy_template.tpl"
      when: '"hdd_only" not in my_policy_test.stdout'

    - name: Create policy 
      shell:
        cmd: qmgmt -u {{ api_service }} policy-rule import /tmp/policy_template.tpl 
      when: '"hdd_only" not in my_policy_test.stdout'





#    - name: Run Benchmarks on SSD
#    - name: Run Benchmarks on HDD
#    - name: Collect and Upload Data 
#
